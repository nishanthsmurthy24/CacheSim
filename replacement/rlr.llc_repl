#include "cache.h"

#define HITS_THRESHOLD 64

uint32_t cnt1[LLC_SET][LLC_WAY];
uint32_t cnt2[LLC_SET][LLC_WAY];
uint32_t access_type_priority[4];
uint32_t threshold;
uint32_t num_hits;
uint32_t sum_preuse_distance;
int32_t  last_access_type[LLC_SET][LLC_WAY];
uint32_t last_access_type_for_hits[4][4];
uint32_t num_llc_accesses = 0;
uint32_t access_type_priority_in_set[LLC_SET][4];
uint32_t last_access_type_for_hits_in_set[LLC_SET][4][4];
uint32_t set_access_type_priority_en = 0;
uint32_t num_accesses_in_set[LLC_SET];

//Additional stats
uint32_t last_access_type_for_replaced_lines[4];
int generate_llc_trace = 0; //Flag to indicate LLC access trace dump
int generate_llc_debug = 0;
// ofstream fs;  //LLC access trace
// ofstream fs1;
uint32_t num_warm_up_accesses = 0;
uint32_t llc_access_count_limit = 0;
uint32_t done_setting_llc_access_count_limit = 0;
char access_type_strings[4][10] = {"LOAD", "RFO", "PREFETCH",  "WRITEBACK"};  


void set_access_type_priorities(uint32_t set);
void reset_additional_stats(uint32_t set);

// initialize replacement state
void CACHE::llc_initialize_replacement(uint64_t _rand_seed)
{
    cout << "Initialize CNT1, CNT2 and threshold" << endl;

    threshold = 10;
    num_hits = 0;
    sum_preuse_distance = 0;

    for (int i=0; i<LLC_SET; i++) {
        for (int j=0; j<LLC_WAY; j++) {
            cnt1[i][j] = 0;
            cnt2[i][j] = 0;

            //last_access_type initialization
            last_access_type[i][j] = -1;
        }

        num_accesses_in_set[i] = 0;
        for (int j=0; j<4; j++) {
            for (int k=0; k<4; k++) {
                last_access_type_for_hits_in_set[i][j][k] = 0;
            }
        }
    }

    for (int i=0; i<4; i++) {
        last_access_type_for_replaced_lines[i] = 0;

        for (int j=0; j<4; j++) {
            last_access_type_for_hits[i][j] = 0;
        }
    }

    for (int i=0; i<LLC_SET; i++) {
        set_access_type_priorities(i); 
        reset_additional_stats(i);
    }

    //Open LLC debug file
    // if (strcmp(llc_debug_file,"None")) { 
        // cout << "llc access debug = " << llc_debug_file << endl;
        // generate_llc_debug = 1;
        // fs1.open(llc_debug_file);
    // }

    //Open LLC access trace
    // if (strcmp(llc_access_trace,"None")) { 
        // cout << "llc access trace = " << llc_access_trace << endl;
        // generate_llc_trace = 1;
        // fs.open(llc_access_trace);
    // }

}

//////////////////////
//TYPE              //
//define LOAD      0//
//define RFO       1//
//define PREFETCH  2//
//define WRITEBACK 3//
//////////////////////

//Set the retain priorities for the access type based on load and RFO hits
void set_access_type_priorities(uint32_t set)
{
    uint32_t access_type_order; //variable used for computing priority
    uint32_t hits[4];           //Hits caused by each access type

    if (set_access_type_priority_en == 0) {
        for (int i = 0; i < 4 ; i++) {
            hits[i] = last_access_type_for_hits[0][i] + last_access_type_for_hits[1][i];
        }

        for (int i = 0; i < 4 ; i++) {
            access_type_priority[i] = 0;
            access_type_order = 1;
            for (int j = 0; j < 4 ; j++) {
                if (i != j) {
                   if (hits[i] > hits[j]) {
                       access_type_order += 1;
                   }
                   else if((i < j) && (hits[i] == hits[j])) {
                       access_type_order += 1;
                   }
                }
            }
            access_type_priority[i] = access_type_order;
        }
    }
    else {

        for (int i = 0; i < 4 ; i++) {
            hits[i] = last_access_type_for_hits_in_set[set][0][i] + last_access_type_for_hits_in_set[set][1][i];
        }

        for (int i = 0; i < 4 ; i++) {
            access_type_priority_in_set[set][i] = 0;
            access_type_order = 1;
            for (int j = 0; j < 4 ; j++) {
                if (i != j) {
                   if (hits[i] > hits[j]) {
                       access_type_order += 1;
                   }
                   else if((i < j) && (hits[i] == hits[j])) {
                       access_type_order += 1;
                   }
                }
            }
            access_type_priority_in_set[set][i] = access_type_order;
        }
    }
}


// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    uint32_t priority[LLC_WAY];
    uint32_t victim = 0;
    
    if(generate_llc_debug)
    {
        // fs1 << "set=" << set << " thresh=" << threshold << " DH_priority=";
        for (int i=0; i<4; i++)
        {
            // fs1 << access_type_priority[i] << " ";
        }

        // fs1 << "cnt1=";
        for (int i=0; i<LLC_WAY; i++)
        {
            // fs1 << cnt1[set][i] << " ";
        }
        // fs1 << "cnt2=";
        for (int i=0; i<LLC_WAY; i++)
        {
            // fs1 << cnt2[set][i] << " ";
        }
        // fs1 << "last_access_type=";
        for (int i=0; i<LLC_WAY; i++)
        {
            // fs1 << last_access_type[set][i] << " ";
        }
        // fs1 << "P=";

    }


    for (int i=0; i<LLC_WAY; i++)
    {
        if (cnt1[set][i] > threshold)
        {
            if(cnt2[set][i] > 0)
                priority[i] = 1;
            else
                priority[i] = 0;

            if (set_access_type_priority_en == 0) 
                priority[i] = priority[i] + access_type_priority[last_access_type[set][i]];
            else 
                priority[i] = access_type_priority_in_set[set][last_access_type[set][i]];

            // if(generate_llc_debug)
                // fs1 << priority[i] << " ";

            // if (last_access_type[set][i] == 3)
            //    priority[i] = 5;
        }
        else
        {
            if(cnt2[set][i] > 0)
                priority[i] = 1;
            else
                priority[i] = 0;

            if (set_access_type_priority_en == 0) 
                priority[i] = 5 + priority[i] + access_type_priority[last_access_type[set][i]];
            else
                priority[i] = 5 + access_type_priority_in_set[set][last_access_type[set][i]];

            // if(generate_llc_debug)
                // fs1 << priority[i] << " ";

            // if (last_access_type[set][i] == 3)
            //    priority[i] = 10;
        }
    }

    victim = 0;

    for (int i=0; i<LLC_WAY; i++)
    {
        if(priority[i] < priority[victim])
        {
            victim = i; 
        }
        else if((priority[i] == priority[victim]) && (cnt1[set][i] < cnt1[set][victim]))
        {
            victim = i;
        }
    }
    if(generate_llc_debug)
        // fs1 << " victim=" << victim << endl;

    return victim;
}


//Reset additional stats
void reset_additional_stats(uint32_t set)
{
    if (set_access_type_priority_en == 0) {
        // if(generate_llc_debug)
            // fs1 << endl << "LLC access count: " << num_llc_accesses << endl;

        for (int i=0; i<4; i++) {

            // if(generate_llc_debug)
                // fs1 << access_type_strings[i] << " Hits: ";

            for (int j=0; j<4; j++) {

                // if(generate_llc_debug)
                    // fs1 << last_access_type_for_hits[i][j] << " ";

                last_access_type_for_hits[i][j] = 0;
            }

            // if(generate_llc_debug)
                // fs1 << endl;
        }
    }
    else {

        // if(generate_llc_debug)
            // fs1 << endl << "set num: " << set << " access count: " << num_accesses_in_set[set] << endl;

        for (int i=0; i<4; i++) {

            // if(generate_llc_debug)
                // fs1 << access_type_strings[i] << " Hits: ";

            for (int j=0; j<4; j++) {

                // if(generate_llc_debug)
                    // fs1 << last_access_type_for_hits_in_set[set][i][j] << " ";

                last_access_type_for_hits_in_set[set][i][j] = 0;
            }

            // if(generate_llc_debug)
                // fs1 << endl;
        }
    }
    
}

//Update addtional stats
void update_additional_stats(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    if (hit) {
        if (last_access_type[set][way] > -1) {
            last_access_type_for_hits[type][last_access_type[set][way]] += 1;
        }
    }
    else {
        if (last_access_type[set][way] > -1) {
            last_access_type_for_replaced_lines[last_access_type[set][way]] += 1;
        }
    }
    if (hit)
        last_access_type_for_hits_in_set[set][type][last_access_type[set][way]] += 1;
    last_access_type[set][way] = type;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{

    //LLC ACCESS COUNT
    num_llc_accesses += 1;

    //Set access count
    num_accesses_in_set[set] += 1;

    //LLC access limit count 
    if(warmup_complete[cpu] && !done_setting_llc_access_count_limit) {

        if (generate_llc_trace == 1) {
            // fs << "Warm up Complete" << endl;
        }

        if (generate_llc_debug == 1) {
            // fs1 << "Warm up Complete" << endl;
        }

        num_warm_up_accesses = num_llc_accesses;
        if (num_warm_up_accesses < 250000) {
            llc_access_count_limit = 250000;
        }
        else {
            llc_access_count_limit = num_warm_up_accesses;
        }

        //Reset LLC access count
        num_llc_accesses = 0;

        //Set done_setting_llc_access_count_limit
        done_setting_llc_access_count_limit = 1;

    }

    // if (generate_llc_trace == 1) {
        // if (hit)
            // fs << ip << " " << type << " " << full_addr << " 1" << endl;
        // else
            // fs << ip << " " << type << " " << full_addr << " 0" << endl;
    // }


    //Increment cnt1 for all ways
    //if(type == LOAD || type == RFO)
    //{
        for (int i=0; i<LLC_WAY; i++)
        {
            ////CNT1 IS RESTRICTED TO 5 BITS
            //if (cnt1[set][i] < 31) {
            //    cnt1[set][i] += 1;
            //}

            //BASELINE: INCREMENT CNT1
            cnt1[set][i] += 1;

        }
    //}

    if (hit && (type == LOAD || type == RFO))
    {
        //Accumulate the preuse distance if the access was hit
        sum_preuse_distance += cnt1[set][way];

        //Increment number of hits
        num_hits += 1;

        //If a pre-determined number of hits is reached, compute threshold
        if(num_hits == HITS_THRESHOLD)
        {
            //Compute average of preuse distances
            uint32_t avg = sum_preuse_distance/num_hits;

            //Threshold is twice the average
            threshold = avg * 2;

            //Reset sum of preuse distances and num_hits
            sum_preuse_distance = 0;
            num_hits = 0;
        }
    }

    //Update cnt1 for the way that was accessed
    if(hit) {
        if(type == LOAD || type == RFO)
            cnt1[set][way] = 0;
    }
    else { 
        cnt1[set][way] = 0;
    }

    if(hit) {
        if (cnt2[set][way] < 1)
            cnt2[set][way] += 1;
    }
    else {
        cnt2[set][way] = 0;
    }

    //reset additional stats
    if (set_access_type_priority_en == 0) {
        if (num_llc_accesses % 512 == 0) { 
            set_access_type_priorities(set); 
            reset_additional_stats(set);
        }
    }
    else {
        if (num_accesses_in_set[set] % 64 == 0) { 
            set_access_type_priorities(set); 
            reset_additional_stats(set);
        }
    }

    //Update additional stats
    update_additional_stats(cpu, set, way, full_addr, ip, victim_addr, type, hit);

}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{

    cout << "Last Access Type for Replaced Lines:" << endl;
    cout << "LOAD = " << last_access_type_for_replaced_lines[0] << endl;
    cout << "RFO = " << last_access_type_for_replaced_lines[1] << endl;
    cout << "PREFETCH = " << last_access_type_for_replaced_lines[2] << endl;
    cout << "WRITEBACK = " << last_access_type_for_replaced_lines[3] << endl;

    // if (generate_llc_trace == 1) 
        // fs.close();

    // if(generate_llc_debug)
        // fs1.close();
    
}
